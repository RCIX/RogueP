TODO

next:

*rename frame manager to UI manager
*break library code out from hardcoding
 *This will require a new structure, put it in a new 'config' or 'data' folder
 *figure out sensible implementation to siphon out 
 *this, quite sadly, runs afoul of the issue behaviors do, that being that I'll need to add code every time i make a new one

short term:

*parsing an xp file into world data (initially whole world for various tests - then later move to prefabs that can be injected into worldgen)
*Move memory segment check behavior into its own behavior
*Make more use of .xp files and such to initialize UI (also pull in more appropriate styling, i'm more or less ignoring the mockup styles I made for now)
*either write single info pane UI frame or different kinds of command pane that render over the rest of the UI
 *At this point I'm thinking a bunch of frames and a single dummy frame that renders a BG
*Implement ability for delayed action cascades (i.e. the ability for an action to trigger X queued actions into the future)
*Write camera tracking code for WorldFrame
*Figure out how to set just the foreground or background color of a tile without changing the character (currently thinking I need a layer on the very top and calls into frame manager to queue tile setting)
*Start looking at how to manage mouse input contextually

medium term:

*figure out memory display marking - only along world edges, make player do a minimal amount of legwork figuring out addresses for input to manual function calls
*allow libraries to be dropped as a game entity so you can pick them up
*allow swapping in and out of libraries
*allow library deletion from memory
*Test feasibility of non-auto-field of view (IE must scan with libraries to gain information about the world)
*Implement hardened memory
*Revisit introspection to scrape for behaviors
 *and now libraries too
*explore options for world generation (how? what kind of world do I want to generate? will there be levels or is it continuous? etc.)
 *Testing note: Tried dynamic world wall calculation. Failed spectacularly on performance grounds. 
*Decide an explicit place for UI initialization code to minimize the burden on having a ridiculously huge MenuGame.__init__
*Break out world generation into its own code once I get that far (again, to reduce size on MenuGame.__init)
*Pull out saving code into more distinct code path to support things like RNG initialization and such
*Re-investigate introspection to scrape for behavior subclasses, or some other non hard coded way
*start storing player and world attributes (enemy program stats, library stats, etc.) in configuration files instead of hardcoded (requires finding a data format - probably JSON)

long term (also known as when im bored and want to work on the game side of game development):

*do something about the fact that the "logic" folder is not particularly logic-y and really only holds menu classes
*create xp sheets for color palettes, display characters, etc.
*finish drafting title screen and display on main menu
*begin thinking of distinct program types and mechanics beyond "shoot thing, it dies"
*explore options for animation(whether procedural or preloaded from .xp)
*Consider having an auto-given library provide what are now innates, and/or just moving basic attack commands to libraries
*come up with additional types of interaction mechanics (attack and beyond)


Completed thus far (started 9/9):

*Convert action history saving into distinct codepath
*expand terminal to display responses as well (scrape UI events to show what's happening)
*make a simple enemy program that can use memory and has random walk behavior
 *define hostile programs with behavior types, stats, executable libraries, etc. and a single hostileprogram flag
*Move action queue and execution code into entity manager to better support cascading sequences of actions
*make a simple enemy program that can use memory and has random walk behavior
 *Write additional behaviors that operate on hostile programs
 *Generalize movement behavior into other than player stuff
  *Actually probably rename this and or turn into two behaviors, one managing memory creation and one managing the actual movement?
*figure out introspection or other method that auto imports all behavior subclasses for execution so i don't have to re-add them
 *First shot failed, python is incredibly obtuse at this
*Start writing utility code to do things like find adjacent entities, get the player, etc. to cut down on code repetition
*Implement foreground and background coloring for world entities
*Revise action clock frame background
*Add max actions/cycle line on action clock frame
*properly offset world frame/action overlay frame from top left
 *not really needed until pseudoterminal and info pane added
*Redo code to use an explicit world tile array, not a blind entity list
 *this method is cool and relatively idiomatic but also scales horribly
 *Ended up having a by-id list as well as a world tiles list
*make an innates panel (or just stick it on the library one and make a dummy library panel)
*reorganize game related frames into game subfolder
*make a single attack things primitive to go with the move primitives
*Implement simple health/kill mechanics
*minimally expand input tree to properly support contextual input
 *create a library/inventory frame
 *improve position keying color scheme
 *write XPLoader position key extractor
*make blank library infor panel bg
*remove superfluous visibility system in frame manager